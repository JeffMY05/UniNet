#!/bin/bash -e

if [[ ${DEBUG} -gt 0 ]]; then set -x; fi

exec 3>&1 # make stdout available as fd 3 for the result
exec &>> /var/log/bash-cni-plugin.log

IP_STORE=/tmp/reserved_ips # all reserved ips will be stored there

echo "CNI command: $CNI_COMMAND" 

stdin=`cat /dev/stdin`
echo "stdin: $stdin"

allocate_ip(){
	for ip in "${all_ips[@]}"
	do
		reserved=false
		for reserved_ip in "${reserved_ips[@]}"
		do
			if [ "$ip" = "$reserved_ip" ]; then
				reserved=true
				break
			fi
		done
		if [ "$reserved" = false ] ; then
			echo "$ip" >> $IP_STORE
			echo "$ip"
			return
		fi
	done
}

inc_ip(){
	local arg1="$1"
	net=$(echo $arg1 | awk -F  "/" '{print $1}')
	new_net_1=$(($(echo "$net" | awk -F "." '{print $1}')))
	new_net_2=$(($(echo "$net" | awk -F "." '{print $2}')))
	new_net_3=$(($(echo "$net" | awk -F "." '{print $3}')))
	new_net_4=$(($(echo "$net" | awk -F "." '{print $4}')+1))
	new_ip=$new_net_1.$new_net_2.$new_net_3.$new_net_4/24
	echo $new_ip
}

case $CNI_COMMAND in
ADD)
	network=$(echo "$stdin" | jq -r ".network")
	subnet=$(echo "$stdin" | jq -r ".subnet")
	update_ip=$(inc_ip $subnet)
	echo "[UniNet-INFO] : default IP address is "$update_ip

	new_ip=$(cat $IP_STORE 2> /dev/null || printf "$update_ip")
	echo "[UniNet-INFO] : new IP address is "$new_ip

	echo "$(inc_ip $new_ip)" > $IP_STORE
	echo "[UniNet-INFO] : next IP address is "$(inc_ip $new_ip)
	
	# new IP address
	container_ip=$new_ip
	echo "[UniNet-INFO] : container ip "$container_ip

	# new container ID
	mkdir -p /var/run/netns/
	ln -sfT $CNI_NETNS /var/run/netns/$CNI_CONTAINERID
	echo "[UniNet-INFO] : container ID done "

	# new v-eth
	rand=$(tr -dc 'A-F0-9' < /dev/urandom | head -c4)
	host_if_name="veth$rand"
	echo "[UniNet-INFO] : "$host_if_name
	echo "[UniNet-INFO] : "$CNI_IFNAME
	ip link add $CNI_IFNAME type veth peer name $host_if_name 
	echo "[UniNet-INFO] : veth done "

	# new host iface
	ip link set $host_if_name up
	ip link set $host_if_name master br-test 
	echo "[UniNet-INFO] : interface up, bridge done "

	# instantiate containerid 
	ip link set $CNI_IFNAME netns $CNI_CONTAINERID
	echo "[UniNet-INFO] : netns done "
	ip netns exec $CNI_CONTAINERID ip link set $CNI_IFNAME up
	echo "[UniNet-INFO] : netns containerid interface up "
	ip netns exec $CNI_CONTAINERID ip addr add $container_ip dev $CNI_IFNAME
	echo "[UniNet-INFO] : assign ip address "
	#ip netns exec $CNI_CONTAINERID ip route add default via $gw_ip dev $CNI_IFNAME 
	#echo "[UniNet-INFO] : interface up, bridge done "

	# check containerid
	echo "[UniNet-INFO] : ========================================="
	ip netns exec $CNI_CONTAINERID ip a
	ip netns exec $CNI_CONTAINERID ip r
	echo "[UniNet-INFO] : ========================================="
	mac=$(ip netns exec $CNI_CONTAINERID ip link show $CNI_IFNAME | awk '/ether/ {print $2}')
echo "{
  \"cniVersion\": \"0.3.1\",
  \"interfaces\": [                                            
      {
          \"name\": \"eth0\",
          \"mac\": \"$mac\",                            
          \"sandbox\": \"$CNI_NETNS\" 
      }
  ],
  \"ips\": [
      {
          \"version\": \"4\",
          \"address\": \"$container_ip\",
          \"gateway\": \"99.99.99.4\",
          \"interface\": 0 
      }
  ]
}" >&3

;;

DEL)
	ip=$(ip netns exec $CNI_CONTAINERID ip addr show eth0 | awk '/inet / {print $2}' | sed  s%/.*%% || echo "")
	echo "[UniNet-INFO] delete IP "$ip
	ip netns delete $CNI_CONTAINERID
	echo "[UniNet-INFO] delete containerid"
	# ip link delete $host_if_name
	# echo "[UniNet-INFO] delete interface"
	#if [ ! -z "$ip" ]
	#then
	#	sed -i "/$ip/d" $IP_STORE
	#fi
;;

GET)
	echo "GET not supported"
	exit 1
;;

VERSION)
echo '{
  "cniVersion": "0.3.1", 
  "supportedVersions": [ "0.3.0", "0.3.1", "0.4.0" ] 
}' >&3
;;

*)
  echo "Unknown cni commandn: $CNI_COMMAND" 
  exit 1
;;

esac
